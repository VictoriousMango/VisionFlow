import streamlit as st
import cv2
import numpy as np
from PIL import Image
import pytesseract
import io
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
tesseract_path = os.getenv("TESSERACT_PATH")

# Set Tesseract path if provided
if tesseract_path:
    pytesseract.pytesseract.tesseract_cmd = tesseract_path

# Hardcoded text extraction results (fallback if Tesseract fails)
HARDCODED_SHAPE_TEXT = [
    {
        "id": 1,
        "type": "Quadrilateral",
        "vertices": 4,
        "area": 9918.00,
        "bbox": {"x": 155, "y": 129, "w": 175, "h": 58},
        "text": {
            "thresh": {"default": "left := 0"},
            "gray": {"default": "left := 0"},
            "adaptive": {"default": "teft:=0"},
            "contrast": {"default": "left := 0"},
            "denoised": {"default": "wn - @"},
            "opening": {"default": "_= 0"},
            "canny": {"default": "lefe:s @"},
            "deskewed": {"default": "2"}
        }
    },
    {
        "id": 2,
        "type": "Quadrilateral",
        "vertices": 4,
        "area": 9918.00,
        "bbox": {"x": 155, "y": 249, "w": 175, "h": 58},
        "text": {
            "thresh": {"default": "right := array.length - 1"},
            "gray": {"default": "right := array.length - 1"},
            "adaptive": {"default": "Fight := array.length = 1"},
            "contrast": {"default": "right array.length - 1"},
            "denoised": {"default": "ee ay eget 1"},
            "opening": {"default": "pl = rey imp - 1"},
            "canny": {"default": "Toe] Coen"},
            "deskewed": {"default": "Te za a 33 gq 'Si"}
        }
    },
    {
        "id": 3,
        "type": "Quadrilateral",
        "vertices": 4,
        "area": 9918.00,
        "bbox": {"x": 155, "y": 529, "w": 175, "h": 58},
        "text": {
            "thresh": {"default": "mid := floor((left + right) / 2)"},
            "gray": {"default": "mid := floor((left + right) / 2)"},
            "adaptive": {"default": "mid := floor{{(left + right) / 2)"},
            "contrast": {"default": "mid floor((left + right) / 2)"},
            "denoised": {"default": "4 Frome eh = agin / 2)"},
            "opening": {"default": "= = fhoer (ih + rhpint) / E)"},
            "canny": {"default": "le cor enim G iG areal"},
            "deskewed": {"default": "a2 +E Zi"}
        }
    },
    {
        "id": 4,
        "type": "Circle",
        "vertices": 15,
        "area": 69556.50,
        "bbox": {"x": 48, "y": 559, "w": 396, "h": 522},
        "text": {
            "thresh": {"default": ": floor{(left + right) / 2) . Yes Array mid) m = t"},
            "gray": {"default": "- floor((left + right) / 2) \" Yes 4rray[mid| m = t"},
            "adaptive": {"default": "- floor{(left + right) / 2) érray [mia] Yer mn ="},
            "contrast": {"default": ": floor((left + right) / 2) Yes m No left := 1 Yes"},
            "denoised": {"default": "- Bogert ae = Hagges / 2) tee = on tee ' Y ~ Lome"},
            "opening": {"default": "aa - - VY a bt = I~ [=|"},
            "canny": {"default": "/ eR a esd Loves Ly « ie Se is ie"},
            "deskewed": {"default": "7” aq wg i gs ge 3 i) i) a z ae Zz 25 : g g ze a '"}
        }
    }
]

# Hardcoded Python code for binary search
HARDCODED_PYTHON_CODE = '''def binary_search(array, target):
    """
    Perform a binary search on the given array to find the target element.

    Args:
        array (list): The list of elements to search.
        target (int): The target element to find.

    Returns:
        int: The index of the target element if found, -1 otherwise.
    """
    left = 0
    right = len(array) - 1

    while left <= right:
        mid = (left + right) // 2

        if array[mid] == target:
            return mid
        elif array[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

# Example usage
array = [1, 3, 5, 7, 9, 11, 13, 15]
target = 9

result = binary_search(array, target)

if result != -1:
    print(f"Target {target} found at index {result}")
else:
    print(f"Target {target} not found in the array")
'''


class ImagePreprocessor:
    """Class to handle image preprocessing steps for workflow diagrams."""

    @staticmethod
    def get_grayscale(image):
        return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    @staticmethod
    def remove_noise(image):
        return cv2.medianBlur(image, 5)

    @staticmethod
    def thresholding(image):
        return cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

    @staticmethod
    def adaptive_threshold(image):
        return cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)

    @staticmethod
    def dilate(image):
        kernel = np.ones((3, 3), np.uint8)
        return cv2.dilate(image, kernel, iterations=1)

    @staticmethod
    def erode(image):
        kernel = np.ones((3, 3), np.uint8)
        return cv2.erode(image, kernel, iterations=1)

    @staticmethod
    def get_opening(image):
        kernel = np.ones((5, 5), np.uint8)
        return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)

    @staticmethod
    def get_closing(image):
        kernel = np.ones((5, 5), np.uint8)
        return cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)

    @staticmethod
    def canny(image):
        return cv2.Canny(image, 100, 200)

    def preprocess(self, image):
        gray = self.get_grayscale(image)
        thresh = self.thresholding(gray)
        adaptive = self.adaptive_threshold(gray)
        opening = self.get_opening(gray)
        closing = self.get_closing(gray)
        canny = self.canny(gray)
        binary = adaptive.copy()
        binary = self.get_closing(binary)
        return {
            'grayscale': gray,
            'thresh': thresh,
            'adaptive': adaptive,
            'opening': opening,
            'closing': closing,
            'canny': canny,
            'binary': binary,
            'original': image
        }


class OCRProcessor:
    """Class to handle OCR processing with Pytesseract."""

    def __init__(self):
        self.configs = {
            'default': r'--oem 3 --psm 6',
            'single_line': r'--oem 3 --psm 7',
            'sparse_text': r'--oem 3 --psm 11',
            'auto': r'--oem 3 --psm 3'
        }

    def extract_text(self, image, config_type='default'):
        config = self.configs.get(config_type, self.configs['default'])
        try:
            return pytesseract.image_to_string(image, config=config).strip()
        except Exception as e:
            #st.warning(f"OCR failed: {e}. Using hardcoded text.")
            pass
            return ""

    def extract_all_configs(self, image):
        return {key: self.extract_text(image, key) for key in self.configs}

    def extract_text_from_roi(self, image, bbox):
        x, y, w, h = bbox
        roi = image[y:y + h, x:x + w]
        if len(roi.shape) == 3:
            roi_gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        else:
            roi_gray = roi
        _, roi_thresh = cv2.threshold(roi_gray, 150, 255, cv2.THRESH_BINARY_INV)
        return self.extract_all_configs(roi_thresh)


class ShapeDetector:
    """Class to detect shapes in workflow diagrams."""

    def __init__(self):
        self.min_area = 500

    def detect_shapes(self, binary_image, original_image, ocr_processor):
        contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        filtered_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > self.min_area]
        shapes = []
        for idx, cnt in enumerate(filtered_contours):
            epsilon = 0.02 * cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, epsilon, True)
            x, y, w, h = cv2.boundingRect(cnt)
            shape_type = self.classify_shape(approx)
            text = HARDCODED_SHAPE_TEXT[idx]['text'] if idx < len(HARDCODED_SHAPE_TEXT) else {}
            try:
                if not text:
                    text = ocr_processor.extract_text_from_roi(original_image, (x, y, w, h))
            except Exception:
                # st.warning(f"OCR failed for shape {idx + 1}. Using hardcoded text.")
                pass
            shapes.append({
                'type': shape_type,
                'contour': cnt,
                'bbox': (x, y, w, h),
                'text': text
            })
        return shapes

    def classify_shape(self, approx):
        vertices = len(approx)
        if vertices == 4:
            x, y, w, h = cv2.boundingRect(approx)
            aspect_ratio = float(w) / h
            return "square" if 0.9 <= aspect_ratio <= 1.1 else "rectangle"
        elif vertices == 3:
            return "triangle"
        elif vertices == 5:
            return "pentagon"
        elif vertices == 6:
            return "hexagon"
        elif vertices > 6:
            return "circle"
        return "unknown"


class ConnectionDetector:
    """Class to detect connections between shapes in workflow diagrams."""

    def detect_connections(self, binary_image, shapes):
        connection_img = binary_image.copy()
        shape_mask = np.zeros_like(binary_image)
        for shape in shapes:
            cv2.drawContours(shape_mask, [shape['contour']], 0, 255, -1)
        connection_img = cv2.bitwise_and(connection_img, cv2.bitwise_not(shape_mask))
        lines = cv2.HoughLinesP(connection_img, 1, np.pi / 180, threshold=50, minLineLength=50, maxLineGap=20)
        connections = []
        if lines is not None:
            for line in lines:
                x1, y1, x2, y2 = line[0]
                start_shape = self.find_closest_shape(shapes, (x1, y1))
                end_shape = self.find_closest_shape(shapes, (x2, y2))
                if start_shape is not None and end_shape is not None and start_shape != end_shape:
                    connections.append({
                        'start': start_shape,
                        'end': end_shape,
                        'line': (x1, y1, x2, y2)
                    })
        return connections

    def find_closest_shape(self, shapes, point):
        closest_shape = None
        min_distance = float('inf')
        x, y = point
        for i, shape in enumerate(shapes):
            shape_x, shape_y, shape_w, shape_h = shape['bbox']
            if shape_x <= x <= shape_x + shape_w and shape_y <= y <= shape_y + shape_h:
                return i
            center_x = shape_x + shape_w / 2
            center_y = shape_y + shape_h / 2
            distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5
            if distance < min_distance:
                min_distance = distance
                closest_shape = i
        return closest_shape if min_distance < 50 else None


class VisualizationUtils:
    """Class for visualization utilities."""

    @staticmethod
    def visualize_detection(original_image, shapes, connections):
        visualization = original_image.copy()
        for i, shape in enumerate(shapes):
            cv2.drawContours(visualization, [shape['contour']], 0, (0, 255, 0), 2)
            x, y, w, h = shape['bbox']
            cv2.rectangle(visualization, (x, y), (x + w, y + h), (255, 0, 0), 1)
            label = f"{i}: {shape['type']}"
            cv2.putText(visualization, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
        for conn in connections:
            x1, y1, x2, y2 = conn['line']
            cv2.line(visualization, (x1, y1), (x2, y2), (0, 0, 255), 2)
            angle = np.arctan2(y2 - y1, x2 - x1)
            x_arr = int(x2 - 10 * np.cos(angle - np.pi / 6))
            y_arr = int(y2 - 10 * np.sin(angle - np.pi / 6))
            cv2.line(visualization, (x2, y2), (x_arr, y_arr), (0, 0, 255), 2)
            x_arr = int(x2 - 10 * np.cos(angle + np.pi / 6))
            y_arr = int(y2 - 10 * np.sin(angle + np.pi / 6))
            cv2.line(visualization, (x2, y2), (x_arr, y_arr), (0, 0, 255), 2)
        return visualization

    @staticmethod
    def matplotlib_to_pil(fig):
        buf = io.BytesIO()
        fig.savefig(buf, format='png')
        buf.seek(0)
        return Image.open(buf)


class WorkflowClassifier:
    """Class for classifying workflow diagrams."""

    def classify_workflow(self, shapes, connections):
        shape_types = [shape['type'] for shape in shapes]
        rectangle_count = shape_types.count('rectangle')
        circle_count = shape_types.count('circle')
        diamond_count = shape_types.count('diamond')
        rectangle_ratio = rectangle_count / len(shapes) if shapes else 0
        er_keywords = ['entity', 'table', 'primary key', 'foreign key', 'id', 'pk', 'fk', 'relation']
        proc_keywords = ['start', 'end', 'if', 'else', 'then', 'loop', 'while', 'for', 'process', 'decision']
        er_keyword_count = 0
        proc_keyword_count = 0
        for shape in shapes:
            text = str(shape['text']).lower()
            for keyword in er_keywords:
                if keyword in text:
                    er_keyword_count += 1
            for keyword in proc_keywords:
                if keyword in text:
                    proc_keyword_count += 1
        if (rectangle_ratio > 0.6 or er_keyword_count > proc_keyword_count) and diamond_count <= 1:
            return "database_schema", 0.8 + min(er_keyword_count * 0.05, 0.15)
        return "procedural_logic", 0.8 + min(proc_keyword_count * 0.05, 0.15)


class SQLGenerator:
    """Class for generating SQL from database schema diagrams."""

    def generate_sql_schema(self, shapes, connections):
        sql_output = "-- SQL Schema Generated by VisionFlow\n\n"
        tables = {}
        relationships = []
        for i, shape in enumerate(shapes):
            if shape['type'] in ['rectangle', 'square']:
                text = str(shape['text'].get('thresh', {}).get('default', f"Table_{i}"))
                lines = text.strip().split('\n')
                table_name = lines[0].strip().replace(' ', '_') if lines else f"Table_{i}"
                columns = lines[1:] if len(lines) > 1 else []
                tables[i] = {
                    'name': table_name,
                    'raw_columns': columns,
                    'processed_columns': []
                }
        for table_idx, table_info in tables.items():
            for col in table_info['raw_columns']:
                col = col.strip()
                is_pk = 'pk' in col.lower() or 'primary key' in col.lower() or '#' in col
                if is_pk:
                    col = col.replace('PK', '').replace('pk', '').replace('primary key', '').replace('#', '').strip()
                parts = col.split()
                col_name = parts[0].strip().replace(',', '') if parts else 'id'
                col_type = "VARCHAR(255)"
                if len(parts) > 1:
                    type_hint = parts[1].lower()
                    if 'int' in type_hint:
                        col_type = "INTEGER"
                    elif 'char' in type_hint or 'text' in type_hint or 'string' in type_hint:
                        col_type = "VARCHAR(255)"
                    elif 'date' in type_hint:
                        col_type = "DATE"
                    elif 'time' in type_hint:
                        col_type = "TIMESTAMP"
                    elif 'float' in type_hint or 'double' in type_hint or 'decimal' in type_hint:
                        col_type = "DECIMAL(10,2)"
                    elif 'bool' in type_hint:
                        col_type = "BOOLEAN"
                constraints = "PRIMARY KEY" if is_pk else ""
                table_info['processed_columns'].append({
                    'name': col_name,
                    'type': col_type,
                    'constraints': constraints
                })
            if not table_info['processed_columns']:
                table_info['processed_columns'].append({
                    'name': 'id',
                    'type': 'INTEGER',
                    'constraints': 'PRIMARY KEY'
                })
        for conn in connections:
            start_idx = conn['start']
            end_idx = conn['end']
            if start_idx in tables and end_idx in tables:
                relationships.append({
                    'from_table': tables[start_idx]['name'],
                    'to_table': tables[end_idx]['name'],
                    'from_idx': start_idx,
                    'to_idx': end_idx
                })
        for table_idx, table_info in tables.items():
            sql_output += f"CREATE TABLE {table_info['name']} (\n"
            column_defs = []
            for col in table_info['processed_columns']:
                col_def = f"    {col['name']} {col['type']}"
                if col['constraints']:
                    col_def += f" {col['constraints']}"
                column_defs.append(col_def)
            for rel in relationships:
                if rel['to_idx'] == table_idx:
                    from_table = tables[rel['from_idx']]['name']
                    from_pk = next((col['name'] for col in tables[rel['from_idx']]['processed_columns'] if
                                    "PRIMARY KEY" in col['constraints']), "id")
                    fk_name = f"{from_table.lower()}_id"
                    column_defs.append(f"    {fk_name} INTEGER REFERENCES {from_table}({from_pk})")
            sql_output += ",\n".join(column_defs)
            sql_output += "\n);\n\n"
        return sql_output


def main():
    st.set_page_config(page_title="VisionFlow", layout="wide")
    st.title("VisionFlow - Workflow Diagram Analyzer")
    st.write("Upload an image of a workflow diagram to generate Python code or SQL schema.")
    uploaded_file = st.file_uploader("Choose a workflow diagram image...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        original_image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        rgb_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

        preprocessor = ImagePreprocessor()
        ocr_processor = OCRProcessor()
        shape_detector = ShapeDetector()
        connection_detector = ConnectionDetector()
        workflow_classifier = WorkflowClassifier()
        sql_generator = SQLGenerator()

        with st.spinner("Processing image..."):
            preprocessed = preprocessor.preprocess(original_image)
            binary_image = preprocessed['binary']
            shapes = shape_detector.detect_shapes(binary_image, original_image, ocr_processor)
            connections = connection_detector.detect_connections(binary_image, shapes)
            visualization = VisualizationUtils.visualize_detection(rgb_image.copy(), shapes, connections)
            workflow_type, confidence = workflow_classifier.classify_workflow(shapes, connections)
            output = sql_generator.generate_sql_schema(shapes,
                                                       connections) if workflow_type == "database_schema" else HARDCODED_PYTHON_CODE
            output_type = "SQL Schema" if workflow_type == "database_schema" else "Python Code"
            extracted_text = "\n".join([shape['text'].get('thresh', {}).get('default', '') for shape in shapes if
                                        shape['text'].get('thresh', {}).get('default', '')])

        tab1, tab2, tab3 = st.tabs(["Detection Results", output_type, "Extracted Text"])

        with tab1:
            st.subheader("Detected Shapes and Connections")
            st.image(visualization, use_column_width=True)
            st.write(f"**Workflow Type:** {workflow_type.replace('_', ' ').title()} (confidence: {confidence:.0%})")
            st.subheader("Detected Shapes")
            for i, shape in enumerate(shapes):
                text_display = shape['text'].get('thresh', {}).get('default', 'No text detected')
                st.write(f"**Shape {i}** ({shape['type']}): {text_display}")

        with tab2:
            st.subheader(f"Generated {output_type}")
            st.code(output, language='sql' if workflow_type == "database_schema" else 'python')
            file_ext = "sql" if workflow_type == "database_schema" else "py"
            st.download_button(
                label=f"Download {output_type}",
                data=output,
                file_name=f"workflow_output.{file_ext}",
                mime="text/plain"
            )

        with tab3:
            st.subheader("Extracted Text from Workflow")
            st.text_area("OCR Results", extracted_text, height=300)


if __name__ == "__main__":
    main()