{
  "images": [
    {
      "id": 0,
      "file_name": "flowchart_000.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 1,
      "file_name": "flowchart_001.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 2,
      "file_name": "flowchart_002.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 3,
      "file_name": "flowchart_003.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 4,
      "file_name": "flowchart_004.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 5,
      "file_name": "flowchart_005.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 6,
      "file_name": "flowchart_006.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 7,
      "file_name": "flowchart_007.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 8,
      "file_name": "flowchart_008.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 9,
      "file_name": "flowchart_009.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 10,
      "file_name": "flowchart_010.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 11,
      "file_name": "flowchart_011.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 12,
      "file_name": "flowchart_012.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 13,
      "file_name": "flowchart_013.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 14,
      "file_name": "flowchart_014.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 15,
      "file_name": "flowchart_015.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 16,
      "file_name": "flowchart_016.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 17,
      "file_name": "flowchart_017.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 18,
      "file_name": "flowchart_018.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 19,
      "file_name": "flowchart_019.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 20,
      "file_name": "flowchart_020.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 21,
      "file_name": "flowchart_021.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 22,
      "file_name": "flowchart_022.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 23,
      "file_name": "flowchart_023.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 24,
      "file_name": "flowchart_024.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 25,
      "file_name": "flowchart_025.jpg",
      "width": 800,
      "height": 1000
    },
    {
      "id": 26,
      "file_name": "flowchart_026.jpg",
      "width": 800,
      "height": 1000
    }
  ],
  "annotations": [
    {
      "id": 0,
      "image_id": 0,
      "category_id": 1,
      "bbox": [
        160,
        50,
        234,
        40
      ],
      "area": 9360,
      "iscrowd": 0,
      "text": "Start Huffman Coding"
    },
    {
      "id": 1,
      "image_id": 0,
      "category_id": 3,
      "bbox": [
        320,
        140,
        256,
        35
      ],
      "area": 8960,
      "iscrowd": 0,
      "text": "Build frequency table"
    },
    {
      "id": 2,
      "image_id": 0,
      "category_id": 3,
      "bbox": [
        480,
        225,
        329,
        43
      ],
      "area": 14147,
      "iscrowd": 0,
      "text": "Create priority queue of nodes"
    },
    {
      "id": 3,
      "image_id": 0,
      "category_id": 2,
      "bbox": [
        640,
        318,
        321,
        78
      ],
      "area": 25038,
      "iscrowd": 0,
      "text": "Queue size > 1?"
    },
    {
      "id": 4,
      "image_id": 0,
      "category_id": 3,
      "bbox": [
        160,
        446,
        451,
        54
      ],
      "area": 24354,
      "iscrowd": 0,
      "text": "Merge two nodes with minimum frequency"
    },
    {
      "id": 5,
      "image_id": 0,
      "category_id": 3,
      "bbox": [
        320,
        550,
        279,
        46
      ],
      "area": 12834,
      "iscrowd": 0,
      "text": "Generate codes from root"
    },
    {
      "id": 6,
      "image_id": 0,
      "category_id": 1,
      "bbox": [
        480,
        646,
        221,
        42
      ],
      "area": 9282,
      "iscrowd": 0,
      "text": "End Huffman Coding"
    },
    {
      "id": 7,
      "image_id": 1,
      "category_id": 1,
      "bbox": [
        160,
        50,
        250,
        54
      ],
      "area": 13500,
      "iscrowd": 0,
      "text": "Start Kosaraju's SCC"
    },
    {
      "id": 8,
      "image_id": 1,
      "category_id": 3,
      "bbox": [
        320,
        154,
        297,
        53
      ],
      "area": 15741,
      "iscrowd": 0,
      "text": "First DFS for finishing times"
    },
    {
      "id": 9,
      "image_id": 1,
      "category_id": 3,
      "bbox": [
        480,
        257,
        426,
        49
      ],
      "area": 20874,
      "iscrowd": 0,
      "text": "Transpose graph, second DFS for SCCs"
    },
    {
      "id": 10,
      "image_id": 1,
      "category_id": 1,
      "bbox": [
        640,
        356,
        247,
        38
      ],
      "area": 9386,
      "iscrowd": 0,
      "text": "End Kosaraju's SCC"
    },
    {
      "id": 11,
      "image_id": 2,
      "category_id": 1,
      "bbox": [
        160,
        50,
        191,
        44
      ],
      "area": 8404,
      "iscrowd": 0,
      "text": "Start Euler Path"
    },
    {
      "id": 12,
      "image_id": 2,
      "category_id": 3,
      "bbox": [
        320,
        144,
        397,
        43
      ],
      "area": 17071,
      "iscrowd": 0,
      "text": "Check graph connectivity and degree"
    },
    {
      "id": 13,
      "image_id": 2,
      "category_id": 3,
      "bbox": [
        480,
        237,
        471,
        45
      ],
      "area": 21195,
      "iscrowd": 0,
      "text": "Find Eulerian path using Hierholzer's algorithm"
    },
    {
      "id": 14,
      "image_id": 2,
      "category_id": 1,
      "bbox": [
        640,
        332,
        186,
        41
      ],
      "area": 7626,
      "iscrowd": 0,
      "text": "End Euler Path"
    },
    {
      "id": 15,
      "image_id": 3,
      "category_id": 1,
      "bbox": [
        160,
        50,
        258,
        34
      ],
      "area": 8772,
      "iscrowd": 0,
      "text": "Start Karger's Min Cut"
    },
    {
      "id": 16,
      "image_id": 3,
      "category_id": 3,
      "bbox": [
        320,
        134,
        496,
        37
      ],
      "area": 18352,
      "iscrowd": 0,
      "text": "Contract random edges until 2 nodes remain"
    },
    {
      "id": 17,
      "image_id": 3,
      "category_id": 3,
      "bbox": [
        480,
        221,
        207,
        54
      ],
      "area": 11178,
      "iscrowd": 0,
      "text": "Count cut edges"
    },
    {
      "id": 18,
      "image_id": 3,
      "category_id": 1,
      "bbox": [
        640,
        325,
        235,
        49
      ],
      "area": 11515,
      "iscrowd": 0,
      "text": "End Karger's Min Cut"
    },
    {
      "id": 19,
      "image_id": 4,
      "category_id": 1,
      "bbox": [
        160,
        50,
        185,
        41
      ],
      "area": 7585,
      "iscrowd": 0,
      "text": "Start Euler Path"
    },
    {
      "id": 20,
      "image_id": 4,
      "category_id": 3,
      "bbox": [
        320,
        141,
        390,
        37
      ],
      "area": 14430,
      "iscrowd": 0,
      "text": "Check graph connectivity and degree"
    },
    {
      "id": 21,
      "image_id": 4,
      "category_id": 3,
      "bbox": [
        480,
        228,
        498,
        35
      ],
      "area": 17430,
      "iscrowd": 0,
      "text": "Find Eulerian path using Hierholzer's algorithm"
    },
    {
      "id": 22,
      "image_id": 4,
      "category_id": 1,
      "bbox": [
        640,
        313,
        200,
        36
      ],
      "area": 7200,
      "iscrowd": 0,
      "text": "End Euler Path"
    },
    {
      "id": 23,
      "image_id": 5,
      "category_id": 1,
      "bbox": [
        160,
        50,
        279,
        38
      ],
      "area": 10602,
      "iscrowd": 0,
      "text": "Start Manacher's Algorithm"
    },
    {
      "id": 24,
      "image_id": 5,
      "category_id": 3,
      "bbox": [
        320,
        138,
        482,
        45
      ],
      "area": 21690,
      "iscrowd": 0,
      "text": "Transform string to handle odd/even lengths"
    },
    {
      "id": 25,
      "image_id": 5,
      "category_id": 3,
      "bbox": [
        480,
        233,
        322,
        36
      ],
      "area": 11592,
      "iscrowd": 0,
      "text": "Compute palindrome lengths"
    },
    {
      "id": 26,
      "image_id": 5,
      "category_id": 1,
      "bbox": [
        640,
        319,
        305,
        47
      ],
      "area": 14335,
      "iscrowd": 0,
      "text": "End Manacher's Algorithm"
    },
    {
      "id": 27,
      "image_id": 6,
      "category_id": 1,
      "bbox": [
        160,
        50,
        237,
        38
      ],
      "area": 9006,
      "iscrowd": 0,
      "text": "Start Karger's Min Cut"
    },
    {
      "id": 28,
      "image_id": 6,
      "category_id": 3,
      "bbox": [
        320,
        138,
        504,
        40
      ],
      "area": 20160,
      "iscrowd": 0,
      "text": "Contract random edges until 2 nodes remain"
    },
    {
      "id": 29,
      "image_id": 6,
      "category_id": 3,
      "bbox": [
        480,
        228,
        195,
        49
      ],
      "area": 9555,
      "iscrowd": 0,
      "text": "Count cut edges"
    },
    {
      "id": 30,
      "image_id": 6,
      "category_id": 1,
      "bbox": [
        640,
        327,
        254,
        48
      ],
      "area": 12192,
      "iscrowd": 0,
      "text": "End Karger's Min Cut"
    },
    {
      "id": 31,
      "image_id": 7,
      "category_id": 1,
      "bbox": [
        160,
        50,
        348,
        52
      ],
      "area": 18096,
      "iscrowd": 0,
      "text": "Start Matrix Chain Multiplication"
    },
    {
      "id": 32,
      "image_id": 7,
      "category_id": 3,
      "bbox": [
        320,
        152,
        208,
        47
      ],
      "area": 9776,
      "iscrowd": 0,
      "text": "Initialize dp table"
    },
    {
      "id": 33,
      "image_id": 7,
      "category_id": 3,
      "bbox": [
        480,
        249,
        315,
        39
      ],
      "area": 12285,
      "iscrowd": 0,
      "text": "Fill dp using minimum cost"
    },
    {
      "id": 34,
      "image_id": 7,
      "category_id": 1,
      "bbox": [
        640,
        338,
        335,
        39
      ],
      "area": 13065,
      "iscrowd": 0,
      "text": "End Matrix Chain Multiplication"
    },
    {
      "id": 35,
      "image_id": 8,
      "category_id": 1,
      "bbox": [
        160,
        50,
        180,
        37
      ],
      "area": 6660,
      "iscrowd": 0,
      "text": "Start Min Cut"
    },
    {
      "id": 36,
      "image_id": 8,
      "category_id": 3,
      "bbox": [
        320,
        137,
        271,
        42
      ],
      "area": 11382,
      "iscrowd": 0,
      "text": "Run max flow algorithm"
    },
    {
      "id": 37,
      "image_id": 8,
      "category_id": 3,
      "bbox": [
        480,
        229,
        295,
        36
      ],
      "area": 10620,
      "iscrowd": 0,
      "text": "Identify minimum cut set"
    },
    {
      "id": 38,
      "image_id": 8,
      "category_id": 1,
      "bbox": [
        640,
        315,
        144,
        50
      ],
      "area": 7200,
      "iscrowd": 0,
      "text": "End Min Cut"
    },
    {
      "id": 39,
      "image_id": 9,
      "category_id": 1,
      "bbox": [
        160,
        50,
        266,
        47
      ],
      "area": 12502,
      "iscrowd": 0,
      "text": "Start Bipartite Matching"
    },
    {
      "id": 40,
      "image_id": 9,
      "category_id": 3,
      "bbox": [
        320,
        147,
        359,
        48
      ],
      "area": 17232,
      "iscrowd": 0,
      "text": "Initialize matching and visited sets"
    },
    {
      "id": 41,
      "image_id": 9,
      "category_id": 2,
      "bbox": [
        480,
        245,
        347,
        57
      ],
      "area": 19779,
      "iscrowd": 0,
      "text": "Unmatched nodes?"
    },
    {
      "id": 42,
      "image_id": 9,
      "category_id": 3,
      "bbox": [
        640,
        352,
        352,
        38
      ],
      "area": 13376,
      "iscrowd": 0,
      "text": "Augment path using DFS/BFS"
    },
    {
      "id": 43,
      "image_id": 9,
      "category_id": 3,
      "bbox": [
        160,
        440,
        210,
        36
      ],
      "area": 7560,
      "iscrowd": 0,
      "text": "Update matching"
    },
    {
      "id": 44,
      "image_id": 9,
      "category_id": 1,
      "bbox": [
        320,
        526,
        261,
        39
      ],
      "area": 10179,
      "iscrowd": 0,
      "text": "End Bipartite Matching"
    },
    {
      "id": 45,
      "image_id": 10,
      "category_id": 1,
      "bbox": [
        160,
        50,
        228,
        36
      ],
      "area": 8208,
      "iscrowd": 0,
      "text": "Start Linear Search"
    },
    {
      "id": 46,
      "image_id": 10,
      "category_id": 3,
      "bbox": [
        320,
        136,
        88,
        40
      ],
      "area": 3520,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 47,
      "image_id": 10,
      "category_id": 2,
      "bbox": [
        480,
        226,
        127,
        70
      ],
      "area": 8890,
      "iscrowd": 0,
      "text": "i < n?"
    },
    {
      "id": 48,
      "image_id": 10,
      "category_id": 2,
      "bbox": [
        640,
        346,
        354,
        78
      ],
      "area": 27612,
      "iscrowd": 0,
      "text": "array[i] == target?"
    },
    {
      "id": 49,
      "image_id": 10,
      "category_id": 3,
      "bbox": [
        160,
        474,
        145,
        54
      ],
      "area": 7830,
      "iscrowd": 0,
      "text": "i = i + 1"
    },
    {
      "id": 50,
      "image_id": 10,
      "category_id": 3,
      "bbox": [
        320,
        578,
        320,
        49
      ],
      "area": 15680,
      "iscrowd": 0,
      "text": "Return -1 (Target not found)"
    },
    {
      "id": 51,
      "image_id": 10,
      "category_id": 3,
      "bbox": [
        480,
        677,
        373,
        40
      ],
      "area": 14920,
      "iscrowd": 0,
      "text": "Return i (Target found at index i)"
    },
    {
      "id": 52,
      "image_id": 10,
      "category_id": 1,
      "bbox": [
        640,
        767,
        232,
        41
      ],
      "area": 9512,
      "iscrowd": 0,
      "text": "End Linear Search"
    },
    {
      "id": 53,
      "image_id": 11,
      "category_id": 1,
      "bbox": [
        160,
        50,
        211,
        42
      ],
      "area": 8862,
      "iscrowd": 0,
      "text": "Start Selection Sort"
    },
    {
      "id": 54,
      "image_id": 11,
      "category_id": 3,
      "bbox": [
        320,
        142,
        115,
        37
      ],
      "area": 4255,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 55,
      "image_id": 11,
      "category_id": 2,
      "bbox": [
        480,
        229,
        167,
        66
      ],
      "area": 11022,
      "iscrowd": 0,
      "text": "i < n-1?"
    },
    {
      "id": 56,
      "image_id": 11,
      "category_id": 3,
      "bbox": [
        640,
        345,
        151,
        38
      ],
      "area": 5738,
      "iscrowd": 0,
      "text": "min_idx = i"
    },
    {
      "id": 57,
      "image_id": 11,
      "category_id": 3,
      "bbox": [
        160,
        433,
        132,
        46
      ],
      "area": 6072,
      "iscrowd": 0,
      "text": "j = i + 1"
    },
    {
      "id": 58,
      "image_id": 11,
      "category_id": 2,
      "bbox": [
        320,
        529,
        174,
        80
      ],
      "area": 13920,
      "iscrowd": 0,
      "text": "j < n?"
    },
    {
      "id": 59,
      "image_id": 11,
      "category_id": 2,
      "bbox": [
        480,
        659,
        438,
        78
      ],
      "area": 34164,
      "iscrowd": 0,
      "text": "array[j] < array[min_idx]?"
    },
    {
      "id": 60,
      "image_id": 11,
      "category_id": 3,
      "bbox": [
        640,
        787,
        182,
        40
      ],
      "area": 7280,
      "iscrowd": 0,
      "text": "min_idx = j"
    },
    {
      "id": 61,
      "image_id": 11,
      "category_id": 3,
      "bbox": [
        160,
        877,
        339,
        46
      ],
      "area": 15594,
      "iscrowd": 0,
      "text": "Swap array[i] and array[min_idx]"
    },
    {
      "id": 62,
      "image_id": 11,
      "category_id": 1,
      "bbox": [
        320,
        973,
        214,
        48
      ],
      "area": 10272,
      "iscrowd": 0,
      "text": "End Selection Sort"
    },
    {
      "id": 63,
      "image_id": 12,
      "category_id": 1,
      "bbox": [
        160,
        50,
        351,
        37
      ],
      "area": 12987,
      "iscrowd": 0,
      "text": "Start Matrix Chain Multiplication"
    },
    {
      "id": 64,
      "image_id": 12,
      "category_id": 3,
      "bbox": [
        320,
        137,
        234,
        43
      ],
      "area": 10062,
      "iscrowd": 0,
      "text": "Initialize dp table"
    },
    {
      "id": 65,
      "image_id": 12,
      "category_id": 3,
      "bbox": [
        480,
        230,
        305,
        52
      ],
      "area": 15860,
      "iscrowd": 0,
      "text": "Fill dp using minimum cost"
    },
    {
      "id": 66,
      "image_id": 12,
      "category_id": 1,
      "bbox": [
        640,
        332,
        315,
        45
      ],
      "area": 14175,
      "iscrowd": 0,
      "text": "End Matrix Chain Multiplication"
    },
    {
      "id": 67,
      "image_id": 13,
      "category_id": 1,
      "bbox": [
        160,
        50,
        203,
        54
      ],
      "area": 10962,
      "iscrowd": 0,
      "text": "Start Trie Insert"
    },
    {
      "id": 68,
      "image_id": 13,
      "category_id": 3,
      "bbox": [
        320,
        154,
        213,
        48
      ],
      "area": 10224,
      "iscrowd": 0,
      "text": "Start from root"
    },
    {
      "id": 69,
      "image_id": 13,
      "category_id": 3,
      "bbox": [
        480,
        252,
        232,
        35
      ],
      "area": 8120,
      "iscrowd": 0,
      "text": "For each character"
    },
    {
      "id": 70,
      "image_id": 13,
      "category_id": 2,
      "bbox": [
        640,
        337,
        355,
        75
      ],
      "area": 26625,
      "iscrowd": 0,
      "text": "Node for char exists?"
    },
    {
      "id": 71,
      "image_id": 13,
      "category_id": 3,
      "bbox": [
        160,
        462,
        182,
        37
      ],
      "area": 6734,
      "iscrowd": 0,
      "text": "Create new node"
    },
    {
      "id": 72,
      "image_id": 13,
      "category_id": 3,
      "bbox": [
        320,
        549,
        249,
        36
      ],
      "area": 8964,
      "iscrowd": 0,
      "text": "Move to next node"
    },
    {
      "id": 73,
      "image_id": 13,
      "category_id": 3,
      "bbox": [
        480,
        635,
        201,
        51
      ],
      "area": 10251,
      "iscrowd": 0,
      "text": "Mark end of word"
    },
    {
      "id": 74,
      "image_id": 13,
      "category_id": 1,
      "bbox": [
        640,
        736,
        179,
        48
      ],
      "area": 8592,
      "iscrowd": 0,
      "text": "End Trie Insert"
    },
    {
      "id": 75,
      "image_id": 14,
      "category_id": 1,
      "bbox": [
        160,
        50,
        188,
        36
      ],
      "area": 6768,
      "iscrowd": 0,
      "text": "Start Fibonacci"
    },
    {
      "id": 76,
      "image_id": 14,
      "category_id": 3,
      "bbox": [
        320,
        136,
        279,
        53
      ],
      "area": 14787,
      "iscrowd": 0,
      "text": "dp[0] = 0, dp[1] = 1"
    },
    {
      "id": 77,
      "image_id": 14,
      "category_id": 3,
      "bbox": [
        480,
        239,
        103,
        40
      ],
      "area": 4120,
      "iscrowd": 0,
      "text": "i = 2"
    },
    {
      "id": 78,
      "image_id": 14,
      "category_id": 2,
      "bbox": [
        640,
        329,
        167,
        51
      ],
      "area": 8517,
      "iscrowd": 0,
      "text": "i <= n?"
    },
    {
      "id": 79,
      "image_id": 14,
      "category_id": 3,
      "bbox": [
        160,
        430,
        291,
        49
      ],
      "area": 14259,
      "iscrowd": 0,
      "text": "dp[i] = dp[i-1] + dp[i-2]"
    },
    {
      "id": 80,
      "image_id": 14,
      "category_id": 3,
      "bbox": [
        320,
        529,
        126,
        35
      ],
      "area": 4410,
      "iscrowd": 0,
      "text": "i = i + 1"
    },
    {
      "id": 81,
      "image_id": 14,
      "category_id": 3,
      "bbox": [
        480,
        614,
        178,
        44
      ],
      "area": 7832,
      "iscrowd": 0,
      "text": "Return dp[n]"
    },
    {
      "id": 82,
      "image_id": 14,
      "category_id": 1,
      "bbox": [
        640,
        708,
        172,
        52
      ],
      "area": 8944,
      "iscrowd": 0,
      "text": "End Fibonacci"
    },
    {
      "id": 83,
      "image_id": 15,
      "category_id": 1,
      "bbox": [
        160,
        50,
        291,
        34
      ],
      "area": 9894,
      "iscrowd": 0,
      "text": "Start Graham's Convex Hull"
    },
    {
      "id": 84,
      "image_id": 15,
      "category_id": 3,
      "bbox": [
        320,
        134,
        384,
        54
      ],
      "area": 20736,
      "iscrowd": 0,
      "text": "Find bottom-most point as pivot"
    },
    {
      "id": 85,
      "image_id": 15,
      "category_id": 3,
      "bbox": [
        480,
        238,
        295,
        45
      ],
      "area": 13275,
      "iscrowd": 0,
      "text": "Sort points by polar angle"
    },
    {
      "id": 86,
      "image_id": 15,
      "category_id": 2,
      "bbox": [
        640,
        333,
        225,
        68
      ],
      "area": 15300,
      "iscrowd": 0,
      "text": "More points?"
    },
    {
      "id": 87,
      "image_id": 15,
      "category_id": 3,
      "bbox": [
        160,
        451,
        414,
        50
      ],
      "area": 20700,
      "iscrowd": 0,
      "text": "Add point to hull, handle collinear points"
    },
    {
      "id": 88,
      "image_id": 15,
      "category_id": 3,
      "bbox": [
        320,
        551,
        154,
        34
      ],
      "area": 5236,
      "iscrowd": 0,
      "text": "Return hull"
    },
    {
      "id": 89,
      "image_id": 15,
      "category_id": 1,
      "bbox": [
        480,
        635,
        304,
        46
      ],
      "area": 13984,
      "iscrowd": 0,
      "text": "End Graham's Convex Hull"
    },
    {
      "id": 90,
      "image_id": 16,
      "category_id": 1,
      "bbox": [
        160,
        50,
        245,
        42
      ],
      "area": 10290,
      "iscrowd": 0,
      "text": "Start Selection Sort"
    },
    {
      "id": 91,
      "image_id": 16,
      "category_id": 3,
      "bbox": [
        320,
        142,
        111,
        54
      ],
      "area": 5994,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 92,
      "image_id": 16,
      "category_id": 2,
      "bbox": [
        480,
        246,
        175,
        72
      ],
      "area": 12600,
      "iscrowd": 0,
      "text": "i < n-1?"
    },
    {
      "id": 93,
      "image_id": 16,
      "category_id": 3,
      "bbox": [
        640,
        368,
        138,
        41
      ],
      "area": 5658,
      "iscrowd": 0,
      "text": "min_idx = i"
    },
    {
      "id": 94,
      "image_id": 16,
      "category_id": 3,
      "bbox": [
        160,
        459,
        120,
        37
      ],
      "area": 4440,
      "iscrowd": 0,
      "text": "j = i + 1"
    },
    {
      "id": 95,
      "image_id": 16,
      "category_id": 2,
      "bbox": [
        320,
        546,
        124,
        70
      ],
      "area": 8680,
      "iscrowd": 0,
      "text": "j < n?"
    },
    {
      "id": 96,
      "image_id": 16,
      "category_id": 2,
      "bbox": [
        480,
        666,
        455,
        59
      ],
      "area": 26845,
      "iscrowd": 0,
      "text": "array[j] < array[min_idx]?"
    },
    {
      "id": 97,
      "image_id": 16,
      "category_id": 3,
      "bbox": [
        640,
        775,
        134,
        44
      ],
      "area": 5896,
      "iscrowd": 0,
      "text": "min_idx = j"
    },
    {
      "id": 98,
      "image_id": 16,
      "category_id": 3,
      "bbox": [
        160,
        869,
        384,
        34
      ],
      "area": 13056,
      "iscrowd": 0,
      "text": "Swap array[i] and array[min_idx]"
    },
    {
      "id": 99,
      "image_id": 16,
      "category_id": 1,
      "bbox": [
        320,
        953,
        231,
        41
      ],
      "area": 9471,
      "iscrowd": 0,
      "text": "End Selection Sort"
    },
    {
      "id": 100,
      "image_id": 17,
      "category_id": 1,
      "bbox": [
        160,
        50,
        129,
        34
      ],
      "area": 4386,
      "iscrowd": 0,
      "text": "Start DFS"
    },
    {
      "id": 101,
      "image_id": 17,
      "category_id": 3,
      "bbox": [
        320,
        134,
        335,
        43
      ],
      "area": 14405,
      "iscrowd": 0,
      "text": "Mark current node as visited"
    },
    {
      "id": 102,
      "image_id": 17,
      "category_id": 3,
      "bbox": [
        480,
        227,
        269,
        37
      ],
      "area": 9953,
      "iscrowd": 0,
      "text": "Process current node"
    },
    {
      "id": 103,
      "image_id": 17,
      "category_id": 2,
      "bbox": [
        640,
        314,
        422,
        56
      ],
      "area": 23632,
      "iscrowd": 0,
      "text": "Has unvisited neighbors?"
    },
    {
      "id": 104,
      "image_id": 17,
      "category_id": 3,
      "bbox": [
        160,
        420,
        384,
        46
      ],
      "area": 17664,
      "iscrowd": 0,
      "text": "Recursively DFS on unvisited neighbor"
    },
    {
      "id": 105,
      "image_id": 17,
      "category_id": 1,
      "bbox": [
        320,
        516,
        105,
        36
      ],
      "area": 3780,
      "iscrowd": 0,
      "text": "End DFS"
    },
    {
      "id": 106,
      "image_id": 18,
      "category_id": 1,
      "bbox": [
        160,
        50,
        112,
        51
      ],
      "area": 5712,
      "iscrowd": 0,
      "text": "Start A*"
    },
    {
      "id": 107,
      "image_id": 18,
      "category_id": 3,
      "bbox": [
        320,
        151,
        380,
        52
      ],
      "area": 19760,
      "iscrowd": 0,
      "text": "Initialize open set with start node"
    },
    {
      "id": 108,
      "image_id": 18,
      "category_id": 2,
      "bbox": [
        480,
        253,
        359,
        55
      ],
      "area": 19745,
      "iscrowd": 0,
      "text": "Open set not empty?"
    },
    {
      "id": 109,
      "image_id": 18,
      "category_id": 3,
      "bbox": [
        640,
        358,
        357,
        40
      ],
      "area": 14280,
      "iscrowd": 0,
      "text": "Get node with minimum f-score"
    },
    {
      "id": 110,
      "image_id": 18,
      "category_id": 2,
      "bbox": [
        160,
        448,
        279,
        74
      ],
      "area": 20646,
      "iscrowd": 0,
      "text": "Goal reached?"
    },
    {
      "id": 111,
      "image_id": 18,
      "category_id": 3,
      "bbox": [
        320,
        572,
        360,
        40
      ],
      "area": 14400,
      "iscrowd": 0,
      "text": "Expand node, update neighbors"
    },
    {
      "id": 112,
      "image_id": 18,
      "category_id": 3,
      "bbox": [
        480,
        662,
        165,
        42
      ],
      "area": 6930,
      "iscrowd": 0,
      "text": "Return path"
    },
    {
      "id": 113,
      "image_id": 18,
      "category_id": 1,
      "bbox": [
        640,
        754,
        91,
        35
      ],
      "area": 3185,
      "iscrowd": 0,
      "text": "End A*"
    },
    {
      "id": 114,
      "image_id": 19,
      "category_id": 1,
      "bbox": [
        160,
        50,
        142,
        44
      ],
      "area": 6248,
      "iscrowd": 0,
      "text": "Start KMP"
    },
    {
      "id": 115,
      "image_id": 19,
      "category_id": 3,
      "bbox": [
        320,
        144,
        361,
        51
      ],
      "area": 18411,
      "iscrowd": 0,
      "text": "Compute LPS array for pattern"
    },
    {
      "id": 116,
      "image_id": 19,
      "category_id": 3,
      "bbox": [
        480,
        245,
        162,
        40
      ],
      "area": 6480,
      "iscrowd": 0,
      "text": "i = 0, j = 0"
    },
    {
      "id": 117,
      "image_id": 19,
      "category_id": 2,
      "bbox": [
        640,
        335,
        134,
        63
      ],
      "area": 8442,
      "iscrowd": 0,
      "text": "i < n?"
    },
    {
      "id": 118,
      "image_id": 19,
      "category_id": 2,
      "bbox": [
        160,
        448,
        391,
        59
      ],
      "area": 23069,
      "iscrowd": 0,
      "text": "text[i] == pattern[j]?"
    },
    {
      "id": 119,
      "image_id": 19,
      "category_id": 3,
      "bbox": [
        320,
        557,
        267,
        52
      ],
      "area": 13884,
      "iscrowd": 0,
      "text": "i = i + 1, j = j + 1"
    },
    {
      "id": 120,
      "image_id": 19,
      "category_id": 2,
      "bbox": [
        480,
        659,
        164,
        75
      ],
      "area": 12300,
      "iscrowd": 0,
      "text": "j == m?"
    },
    {
      "id": 121,
      "image_id": 19,
      "category_id": 3,
      "bbox": [
        640,
        784,
        273,
        40
      ],
      "area": 10920,
      "iscrowd": 0,
      "text": "Report match at (i-m)"
    },
    {
      "id": 122,
      "image_id": 19,
      "category_id": 3,
      "bbox": [
        160,
        874,
        293,
        51
      ],
      "area": 14943,
      "iscrowd": 0,
      "text": "j = lps[j-1] if j > 0 else 0"
    },
    {
      "id": 123,
      "image_id": 19,
      "category_id": 1,
      "bbox": [
        320,
        975,
        126,
        42
      ],
      "area": 5292,
      "iscrowd": 0,
      "text": "End KMP"
    },
    {
      "id": 124,
      "image_id": 20,
      "category_id": 1,
      "bbox": [
        160,
        50,
        220,
        41
      ],
      "area": 9020,
      "iscrowd": 0,
      "text": "Start Selection Sort"
    },
    {
      "id": 125,
      "image_id": 20,
      "category_id": 3,
      "bbox": [
        320,
        141,
        119,
        47
      ],
      "area": 5593,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 126,
      "image_id": 20,
      "category_id": 2,
      "bbox": [
        480,
        238,
        169,
        75
      ],
      "area": 12675,
      "iscrowd": 0,
      "text": "i < n-1?"
    },
    {
      "id": 127,
      "image_id": 20,
      "category_id": 3,
      "bbox": [
        640,
        363,
        132,
        50
      ],
      "area": 6600,
      "iscrowd": 0,
      "text": "min_idx = i"
    },
    {
      "id": 128,
      "image_id": 20,
      "category_id": 3,
      "bbox": [
        160,
        463,
        144,
        51
      ],
      "area": 7344,
      "iscrowd": 0,
      "text": "j = i + 1"
    },
    {
      "id": 129,
      "image_id": 20,
      "category_id": 2,
      "bbox": [
        320,
        564,
        130,
        80
      ],
      "area": 10400,
      "iscrowd": 0,
      "text": "j < n?"
    },
    {
      "id": 130,
      "image_id": 20,
      "category_id": 2,
      "bbox": [
        480,
        694,
        453,
        73
      ],
      "area": 33069,
      "iscrowd": 0,
      "text": "array[j] < array[min_idx]?"
    },
    {
      "id": 131,
      "image_id": 20,
      "category_id": 3,
      "bbox": [
        640,
        817,
        158,
        43
      ],
      "area": 6794,
      "iscrowd": 0,
      "text": "min_idx = j"
    },
    {
      "id": 132,
      "image_id": 20,
      "category_id": 3,
      "bbox": [
        160,
        910,
        376,
        50
      ],
      "area": 18800,
      "iscrowd": 0,
      "text": "Swap array[i] and array[min_idx]"
    },
    {
      "id": 133,
      "image_id": 20,
      "category_id": 1,
      "bbox": [
        320,
        1010,
        207,
        54
      ],
      "area": 11178,
      "iscrowd": 0,
      "text": "End Selection Sort"
    },
    {
      "id": 134,
      "image_id": 21,
      "category_id": 1,
      "bbox": [
        160,
        50,
        203,
        36
      ],
      "area": 7308,
      "iscrowd": 0,
      "text": "Start Boyer-Moore"
    },
    {
      "id": 135,
      "image_id": 21,
      "category_id": 3,
      "bbox": [
        320,
        136,
        499,
        52
      ],
      "area": 25948,
      "iscrowd": 0,
      "text": "Precompute bad character and good suffix rules"
    },
    {
      "id": 136,
      "image_id": 21,
      "category_id": 3,
      "bbox": [
        480,
        238,
        121,
        46
      ],
      "area": 5566,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 137,
      "image_id": 21,
      "category_id": 2,
      "bbox": [
        640,
        334,
        239,
        69
      ],
      "area": 16491,
      "iscrowd": 0,
      "text": "i <= n-m?"
    },
    {
      "id": 138,
      "image_id": 21,
      "category_id": 3,
      "bbox": [
        160,
        453,
        350,
        44
      ],
      "area": 15400,
      "iscrowd": 0,
      "text": "Align pattern, check mismatch"
    },
    {
      "id": 139,
      "image_id": 21,
      "category_id": 3,
      "bbox": [
        320,
        547,
        273,
        36
      ],
      "area": 9828,
      "iscrowd": 0,
      "text": "Shift pattern using rules"
    },
    {
      "id": 140,
      "image_id": 21,
      "category_id": 1,
      "bbox": [
        480,
        633,
        206,
        48
      ],
      "area": 9888,
      "iscrowd": 0,
      "text": "End Boyer-Moore"
    },
    {
      "id": 141,
      "image_id": 22,
      "category_id": 1,
      "bbox": [
        160,
        50,
        258,
        40
      ],
      "area": 10320,
      "iscrowd": 0,
      "text": "Start Kosaraju's SCC"
    },
    {
      "id": 142,
      "image_id": 22,
      "category_id": 3,
      "bbox": [
        320,
        140,
        301,
        46
      ],
      "area": 13846,
      "iscrowd": 0,
      "text": "First DFS for finishing times"
    },
    {
      "id": 143,
      "image_id": 22,
      "category_id": 3,
      "bbox": [
        480,
        236,
        431,
        43
      ],
      "area": 18533,
      "iscrowd": 0,
      "text": "Transpose graph, second DFS for SCCs"
    },
    {
      "id": 144,
      "image_id": 22,
      "category_id": 1,
      "bbox": [
        640,
        329,
        227,
        44
      ],
      "area": 9988,
      "iscrowd": 0,
      "text": "End Kosaraju's SCC"
    },
    {
      "id": 145,
      "image_id": 23,
      "category_id": 1,
      "bbox": [
        160,
        50,
        330,
        50
      ],
      "area": 16500,
      "iscrowd": 0,
      "text": "Start Matrix Chain Multiplication"
    },
    {
      "id": 146,
      "image_id": 23,
      "category_id": 3,
      "bbox": [
        320,
        150,
        206,
        54
      ],
      "area": 11124,
      "iscrowd": 0,
      "text": "Initialize dp table"
    },
    {
      "id": 147,
      "image_id": 23,
      "category_id": 3,
      "bbox": [
        480,
        254,
        323,
        51
      ],
      "area": 16473,
      "iscrowd": 0,
      "text": "Fill dp using minimum cost"
    },
    {
      "id": 148,
      "image_id": 23,
      "category_id": 1,
      "bbox": [
        640,
        355,
        323,
        36
      ],
      "area": 11628,
      "iscrowd": 0,
      "text": "End Matrix Chain Multiplication"
    },
    {
      "id": 149,
      "image_id": 24,
      "category_id": 1,
      "bbox": [
        160,
        50,
        239,
        54
      ],
      "area": 12906,
      "iscrowd": 0,
      "text": "Start Boyer-Moore"
    },
    {
      "id": 150,
      "image_id": 24,
      "category_id": 3,
      "bbox": [
        320,
        154,
        490,
        40
      ],
      "area": 19600,
      "iscrowd": 0,
      "text": "Precompute bad character and good suffix rules"
    },
    {
      "id": 151,
      "image_id": 24,
      "category_id": 3,
      "bbox": [
        480,
        244,
        93,
        48
      ],
      "area": 4464,
      "iscrowd": 0,
      "text": "i = 0"
    },
    {
      "id": 152,
      "image_id": 24,
      "category_id": 2,
      "bbox": [
        640,
        342,
        225,
        65
      ],
      "area": 14625,
      "iscrowd": 0,
      "text": "i <= n-m?"
    },
    {
      "id": 153,
      "image_id": 24,
      "category_id": 3,
      "bbox": [
        160,
        457,
        339,
        48
      ],
      "area": 16272,
      "iscrowd": 0,
      "text": "Align pattern, check mismatch"
    },
    {
      "id": 154,
      "image_id": 24,
      "category_id": 3,
      "bbox": [
        320,
        555,
        284,
        37
      ],
      "area": 10508,
      "iscrowd": 0,
      "text": "Shift pattern using rules"
    },
    {
      "id": 155,
      "image_id": 24,
      "category_id": 1,
      "bbox": [
        480,
        642,
        209,
        38
      ],
      "area": 7942,
      "iscrowd": 0,
      "text": "End Boyer-Moore"
    },
    {
      "id": 156,
      "image_id": 25,
      "category_id": 1,
      "bbox": [
        160,
        50,
        228,
        51
      ],
      "area": 11628,
      "iscrowd": 0,
      "text": "Start Boruvka's MST"
    },
    {
      "id": 157,
      "image_id": 25,
      "category_id": 3,
      "bbox": [
        320,
        151,
        232,
        51
      ],
      "area": 11832,
      "iscrowd": 0,
      "text": "Initialize disjoint sets"
    },
    {
      "id": 158,
      "image_id": 25,
      "category_id": 3,
      "bbox": [
        480,
        252,
        333,
        42
      ],
      "area": 13986,
      "iscrowd": 0,
      "text": "Iteratively find cheapest edges"
    },
    {
      "id": 159,
      "image_id": 25,
      "category_id": 1,
      "bbox": [
        640,
        344,
        206,
        53
      ],
      "area": 10918,
      "iscrowd": 0,
      "text": "End Boruvka's MST"
    },
    {
      "id": 160,
      "image_id": 26,
      "category_id": 1,
      "bbox": [
        160,
        50,
        208,
        50
      ],
      "area": 10400,
      "iscrowd": 0,
      "text": "Start Quick Sort"
    },
    {
      "id": 161,
      "image_id": 26,
      "category_id": 2,
      "bbox": [
        320,
        150,
        230,
        76
      ],
      "area": 17480,
      "iscrowd": 0,
      "text": "low < high?"
    },
    {
      "id": 162,
      "image_id": 26,
      "category_id": 3,
      "bbox": [
        480,
        276,
        318,
        34
      ],
      "area": 10812,
      "iscrowd": 0,
      "text": "pivot = Partition(low, high)"
    },
    {
      "id": 163,
      "image_id": 26,
      "category_id": 3,
      "bbox": [
        640,
        360,
        288,
        44
      ],
      "area": 12672,
      "iscrowd": 0,
      "text": "QuickSort(low, pivot-1)"
    },
    {
      "id": 164,
      "image_id": 26,
      "category_id": 3,
      "bbox": [
        160,
        454,
        266,
        41
      ],
      "area": 10906,
      "iscrowd": 0,
      "text": "QuickSort(pivot+1, high)"
    },
    {
      "id": 165,
      "image_id": 26,
      "category_id": 1,
      "bbox": [
        320,
        545,
        167,
        51
      ],
      "area": 8517,
      "iscrowd": 0,
      "text": "End Quick Sort"
    }
  ],
  "categories": [
    {
      "id": 1,
      "name": "oval"
    },
    {
      "id": 2,
      "name": "diamond"
    },
    {
      "id": 3,
      "name": "rectangle"
    }
  ]
}